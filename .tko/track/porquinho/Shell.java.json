{
    "patches": [
        {
            "label": "2025-09-02_15-08-18",
            "content": "@@ -25,33 +25,8 @@\n st;%0A\n-import java.util.Locale;%0A\n impo\n@@ -733,289 +733,28 @@\n     \n-int value = Integer.parseInt(par%5B1%5D);%0A                if(value == 10)       pig.addCoin(Coin.C10);%0A                else if(value == 25)  pig.addCoin(Coin.C25);%0A                else if(value == 50)  pig.addCoin(Coin.C50);%0A                else if(value == 100) pig.addCoin(Coin.C100)\n+// var coin = par%5B1%5D\n ;%0A  \n@@ -822,24 +822,27 @@\n             \n+ //\n  var item = \n@@ -860,24 +860,27 @@\n             \n+ //\n  var volume \n@@ -911,89 +911,8 @@\n %5D);%0A\n-                Item i = new Item(item, volume);%0A                pig.addItem(i);%0A\n     \n@@ -976,24 +976,27 @@\n             \n+ //\n  pig.breakPi\n@@ -1180,282 +1180,8 @@\n das%0A\n-                if(!pig.isBroken()) %7B%0A                    System.out.println(%22fail: you must break the pig first%5Cn%5B%5D%22);%0A                %7D else %7B%0A                    ArrayList%3CCoin%3E coins = pig.extractCoins();%0A                    System.out.println(coins);%0A                %7D%0A\n     \n@@ -1354,111 +1354,8 @@\n dos%0A\n-                ArrayList%3CItem%3E items = pig.extractItems();%0A                System.out.println(items);%0A\n     \n@@ -1922,34 +1922,8 @@\n   %7D%0A\n-        %0A        @Override\n %0A   \n@@ -2017,79 +2017,8 @@\n t%22;%0A\n-            int volumec = 0;%0A            double value = 0;%0A            \n %0A   \n@@ -2061,32 +2061,75 @@\n tringBuilder();%0A\n+            double value = 0, volumec = 0;%0A\n             for(\n@@ -2256,23 +2256,16 @@\n s.coins.\n-get(i).\n toString\n@@ -2328,66 +2328,8 @@\n ();%0A\n-                volumec += this.coins.get(i).getVolume();%0A\n     \n@@ -2490,20 +2490,20 @@\n i != 0) \n-item\n+coin\n s.append\n@@ -2526,20 +2526,20 @@\n         \n-item\n+coin\n s.append\n@@ -2550,23 +2550,16 @@\n s.items.\n-get(i).\n toString\n@@ -2567,66 +2567,8 @@\n ));%0A\n-                volumec += this.items.get(i).getVolume();%0A\n     \n@@ -2642,28 +2642,16 @@\n eMax();%0A\n-            \n %0A       \n@@ -2681,27 +2681,16 @@\n .format(\n-Locale.US, \n %22state=%25\n@@ -2732,11 +2732,12 @@\n =%25.2\n+l\n f \n-:\n+%7C\n  vol\n@@ -2804,28 +2804,16 @@\n olume);%0A\n-            \n %0A       \n@@ -2858,2464 +2858,459 @@\n lic \n-ArrayList%3CCoin%3E extractCoins() %7B%0A            ArrayList%3CCoin%3E tmp = coins;%0A            coins = new ArrayList%3CCoin%3E(0);%0A            return tmp;%0A        %7D%0A        %0A        public ArrayList%3CItem%3E extractItems() %7B%0A            ArrayList%3CItem%3E tmp = new ArrayList%3CItem%3E(0);%0A            if(!isBroken()) %7B%0A                System.out.println(%22fail: you must break the pig first%22);%0A            %7D else %7B%0A                tmp = items;%0A                items = new ArrayList%3CItem%3E(0);%0A            %7D%0A            return tmp;%0A        %7D%0A%0A        public boolean breakPig() %7B%0A            return broken = true;%0A        %7D%0A        %0A        public boolean addCoin(Coin coin) %7B%0A            if(isBroken()) %7B%0A                System.out.println(%22fail: the pig is broken%22);%0A                return false;%0A            %7D else if(getVolume() + coin.getVolume() %3E getVolumeMax()) %7B%0A                System.out.println(%22fail: the pig is full%22);%0A                return false;%0A            %7D%0A            coins.add(coin);%0A            return true;%0A        %7D%0A%0A        public boolean addItem(Item item) %7B%0A            if(isBroken()) %7B%0A                System.out.println(%22fail: the pig is broken%22);%0A                return false;%0A            %7D else if(getVolume() + item.getVolume() %3E getVolumeMax()) %7B%0A                System.out.println(%22fail: the pig is full%22);%0A                return false;%0A            %7D%0A            items.add(item);%0A            return true;%0A        %7D%0A%0A        public Boolean isBroken() %7B%0A            return this.broken;%0A        %7D%0A%0A        public ArrayList%3CCoin%3E getCoins() %7B%0A            return this.coins;%0A        %7D%0A%0A        public ArrayList%3CItem%3E getItems() %7B%0A            return this.items;%0A        %7D%0A%0A        public int getVolume() %7B%0A            int total = 0;%0A%0A            for(Coin coin : coins) %7B%0A                total += coin.getVolume();%0A            %7D%0A            %0A            for(Item item : items) %7B%0A                total += item.getVolume();%0A            %7D%0A%0A            return total;%0A        %7D%0A%0A        public int getVolumeMax() %7B%0A            return this.volumeMax;%0A        %7D%0A%0A%09%7D%0A%0A    static class Coin %7B%0A        private final double value;%0A        private final int volume;%0A        private final String label;%0A%0A        public static final Coin C10  = new Coin(0.10, 1, %22C10%22);%0A        public static final Coin C25  = new Coin(0.25, 2, %22C25%22);%0A        public static final Coin C50  = new Coin(0.50, 3, %22C50%22);%0A        public static final Coin C100 = new Coin(1.00, 4, %22C100%22)\n+Boolean getBroken() %7B%0A            return this.broken;%0A        %7D%0A%0A        public ArrayList%3CCoin%3E getCoins() %7B%0A            return this.coins;%0A        %7D%0A%0A        public ArrayList%3CItem%3E getItems() %7B%0A            return this.items;%0A        %7D%0A%0A        public int getVolumeMax() %7B%0A            return this.volumeMax;%0A        %7D%0A%0A%09%7D%0A%0A    static class Coin %7B%0A        private final double value;%0A        private final int volume;%0A        private final String label\n ;%0A%0A \n@@ -3479,34 +3479,16 @@\n      %7D%0A%0A\n-        @Override%0A\n         \n@@ -3537,58 +3537,10 @@\n urn \n-String.format(Locale.US, %22%25.2f:%25d%22, value, volume)\n+%22%22\n ;%0A  \n@@ -4012,26 +4012,8 @@\n  %7D%0A%0A\n-        @Override%0A\n     \n@@ -4066,45 +4066,10 @@\n urn \n-String.format(%22%25s:%25d%22, label, volume)\n+%22%22\n ;%0A  \n",
            "lines": "164"
        },
        {
            "label": "2025-09-02_16-10-51",
            "content": "@@ -2830,27 +2830,17 @@\n value = \n-getVolume()\n+0\n ;%0A      \n@@ -3116,24 +3116,82 @@\n getValue();%0A\n+                volumec += this.coins.get(i).getVolume();%0A\n             \n@@ -3356,32 +3356,32 @@\n s.append(%22, %22);%0A\n-\n                 \n@@ -3416,32 +3416,90 @@\n i).toString());%0A\n+                volumec += this.items.get(i).getVolume();%0A\n             %7D%0A  \n@@ -5749,88 +5749,9 @@\n   %7D%0A\n-            if(isBroken()) %7B%0A                return 0;%0A            %7D else %7B%0A    \n+%0A\n     \n@@ -5772,30 +5772,16 @@\n  total;%0A\n-            %7D%0A\n         \n",
            "lines": "249"
        },
        {
            "label": "2025-09-02_16-13-28",
            "content": "@@ -2800,27 +2800,17 @@\n lumec = \n-getVolume()\n+0\n ;%0A      \n@@ -2830,17 +2830,27 @@\n value = \n-0\n+getVolume()\n ;%0A      \n",
            "lines": "250"
        },
        {
            "label": "2025-09-02_16-14-19",
            "content": "import java.util.ArrayList;\nimport java.util.Locale;\nimport java.util.Scanner;\n\npublic class Shell {\n    public static void main(String[] _args) {\n        Pig pig = new Pig(0);\n\n        while (true) {\n            var line = scanner.nextLine();\n            System.out.println(\"$\" + line);\n\n            var par = line.split(\" \");\n            var cmd = par[0];\n\n            if (cmd.equals(\"end\")) {\n                break;\n            }\n            else if (cmd.equals(\"init\")) {\n                int maxVolume = Integer.parseInt(par[1]);\n                pig = new Pig(maxVolume);\n            }\n            else if (cmd.equals(\"show\")) {\n                System.out.println(pig.toString());\n            }\n            else if (cmd.equals(\"addCoin\")) {\n                int value = Integer.parseInt(par[1]);\n                if(value == 10)       pig.addCoin(Coin.C10);\n                else if(value == 25)  pig.addCoin(Coin.C25);\n                else if(value == 50)  pig.addCoin(Coin.C50);\n                else if(value == 100) pig.addCoin(Coin.C100);\n            }\n            else if (cmd.equals(\"addItem\")) {\n                var item = par[1];\n                var volume = Integer.parseInt(par[2]);\n                Item i = new Item(item, volume);\n                pig.addItem(i);\n            }\n            else if (cmd.equals(\"break\")) {\n                pig.breakPig();\n            }\n            else if (cmd.equals(\"extractCoins\")) {\n                // Obtenha as moedas usando o m\u00e9todo extractCoins\n                // Imprima as moedas obtidas\n                if(!pig.isBroken()) {\n                    System.out.println(\"fail: you must break the pig first\\n[]\");\n                } else {\n                    ArrayList<Coin> coins = pig.extractCoins();\n                    System.out.println(coins);\n                }\n            }\n            else if (cmd.equals(\"extractItems\")) {\n                // Obtenha os itens usando o m\u00e9todo extractItems\n                // Imprima os itens obtidos\n                ArrayList<Item> items = pig.extractItems();\n                System.out.println(items);\n            }\n            else {\n                System.out.println(\"fail: invalid command\");\n            }\n        }\n    }\n\n    public static Scanner scanner = new Scanner(System.in);\n\n    static class Pig {\n        private Boolean broken;\n        private ArrayList<Coin> coins;\n        private ArrayList<Item> items;\n        private int volumeMax;\n\n        public Pig(int volumeMax) {\n            this.volumeMax = volumeMax;\n            this.broken = false;\n            this.coins = new ArrayList<Coin>(0);\n            this.items = new ArrayList<Item>(0);\n        }\n        \n        @Override\n        public String toString() {\n            String state = (broken) ? \"broken\" : \"intact\";\n            int volumec = getVolume();\n            double value = 0;\n            \n            StringBuilder coins = new StringBuilder();\n            for(int i = 0; i < this.coins.size(); i++) {\n                if(i != 0) coins.append(\", \");\n                coins.append(this.coins.get(i).toString());\n                value += this.coins.get(i).getValue();\n            }\n            \n            StringBuilder items = new StringBuilder();\n            for(int i = 0; i < this.items.size(); i++) {\n                if(i != 0) items.append(\", \");\n                items.append(this.items.get(i).toString());\n            }\n            String volume = volumec + \"/\" + this.getVolumeMax();\n            \n            String sb = String.format(Locale.US, \"state=%s : coins=[%s] : items=[%s] : value=%.2f : volume=%s\", state, coins.toString(), items.toString(), value, volume);\n            \n            return sb;\n        }\n\n        public ArrayList<Coin> extractCoins() {\n            ArrayList<Coin> tmp = coins;\n            coins = new ArrayList<Coin>(0);\n            return tmp;\n        }\n        \n        public ArrayList<Item> extractItems() {\n            ArrayList<Item> tmp = new ArrayList<Item>(0);\n            if(!isBroken()) {\n                System.out.println(\"fail: you must break the pig first\");\n            } else {\n                tmp = items;\n                items = new ArrayList<Item>(0);\n            }\n            return tmp;\n        }\n\n        public boolean breakPig() {\n            return broken = true;\n        }\n        \n        public boolean addCoin(Coin coin) {\n            if(isBroken()) {\n                System.out.println(\"fail: the pig is broken\");\n                return false;\n            } else if(getVolume() + coin.getVolume() > getVolumeMax()) {\n                System.out.println(\"fail: the pig is full\");\n                return false;\n            }\n            coins.add(coin);\n            return true;\n        }\n\n        public boolean addItem(Item item) {\n            if(isBroken()) {\n                System.out.println(\"fail: the pig is broken\");\n                return false;\n            } else if(getVolume() + item.getVolume() > getVolumeMax()) {\n                System.out.println(\"fail: the pig is full\");\n                return false;\n            }\n            items.add(item);\n            return true;\n        }\n\n        public Boolean isBroken() {\n            return this.broken;\n        }\n\n        public ArrayList<Coin> getCoins() {\n            return this.coins;\n        }\n\n        public ArrayList<Item> getItems() {\n            return this.items;\n        }\n\n        public int getVolume() {\n            int total = 0;\n\n            for(Coin coin : coins) {\n                total += coin.getVolume();\n            }\n            \n            for(Item item : items) {\n                total += item.getVolume();\n            }\n            if(isBroken()) {\n                return 0;\n            } else {\n                return total;\n            }\n        }\n\n        public int getVolumeMax() {\n            return this.volumeMax;\n        }\n\n\t}\n\n    static class Coin {\n        private final double value;\n        private final int volume;\n        private final String label;\n\n        public static final Coin C10  = new Coin(0.10, 1, \"C10\");\n        public static final Coin C25  = new Coin(0.25, 2, \"C25\");\n        public static final Coin C50  = new Coin(0.50, 3, \"C50\");\n        public static final Coin C100 = new Coin(1.00, 4, \"C100\");\n\n        public Coin(double value, int volume, String label) {\n            this.value = value;\n            this.volume = volume;\n            this.label = label;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(Locale.US, \"%.2f:%d\", value, volume);\n        }\n\n        public double getValue() {\n            return this.value;\n        }\n\n        public int getVolume() {\n            return this.volume;\n        }\n\n        public String getLabel() {\n            return this.label;\n        }\n\n    }\n\n    public static class Item {\n        private String label;\n        private int volume;\n        \n        public Item(String label, int volume) {\n            this.label = label;\n            this.volume = volume;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"%s:%d\", label, volume);\n        }\n\n        public String getLabel() {\n            return this.label;\n        }\n\n        public void setLabel(String label) {\n            this.label = label;\n        }\n\n        public int getVolume() {\n            return this.volume;\n        }\n\n        public void setVolume(int volume) {\n            this.volume = volume;\n        }\n\n    }\n}\n",
            "lines": "250"
        }
    ]
}