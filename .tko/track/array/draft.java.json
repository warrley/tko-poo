{
    "patches": [
        {
            "label": "2025-08-24_18-02-33",
            "content": "@@ -97,166 +97,8 @@\n %5D;%0A%0A\n-        num%5B0%5D = 52;%0A        num%5B1%5D = 100;%0A        num%5B2%5D = 57;%0A        num%5B3%5D = 578;%0A        num%5B4%5D = 02;%0A%0A        for(int i = 0; i %3C num.length; i++) %7B%0A    \n     \n@@ -128,155 +128,12 @@\n num%5B\n-i\n+0\n %5D);\n-%0A        %7D%0A        %0A        int%5B%5D num2 = %7B52, 100, 57, 587, 0%7D;%0A        %0A        for(int n:num2) %7B%0A            System.out.println(n);%0A        %7D\n %0A%0A  \n",
            "lines": "10"
        },
        {
            "label": "2025-08-24_18-08-44",
            "content": "@@ -1,33 +1,4 @@\n-import java.util.ArrayList;%0A%0A\n publ\n@@ -64,25 +64,8 @@\n  %7B%0A%0A\n-        // Array%0A\n     \n@@ -435,335 +435,8 @@\n  %7D%0A%0A\n-        //ArrayList -%3E addiciona automaticamente, sem se preocupar com o tamanho dele%0A        ArrayList%3CString%3E str = new ArrayList%3CString%3E();%0A        str.add(%22guilherme%22);%0A        str.add(%22warley%22);%0A        str.add(%22brito%22);%0A        str.add(%22farias%22);%0A%0A        for(String s:str) %7B%0A            System.out.println(s);%0A        %7D%0A\n     \n",
            "lines": "24"
        },
        {
            "label": "2025-08-24_18-23-25",
            "content": "@@ -567,152 +567,8 @@\n ele%0A\n-        //tem que passar uma Classe como tipo do array%0A        //Primitimos int -%3E Integer, float -%3E Float, double -%3E Double, char -%3E Character%0A\n     \n@@ -808,1660 +808,8 @@\n   %7D%0A\n-%0A        //metodos -%3E .size() = tamanho do array, .get(index) = pega o elemento passado, .remove(index) = remove o elemento passado, .clear() = limpa%0A%0A%0A        //LinkedList -%3E %0A        LinkedList%3CInteger%3E list = new LinkedList%3C%3E();%0A        list.add(1);%0A%0A        System.out.println(list);%0A    %7D%0A%0A    //LikedList -%3E %0A    %0A    static class LinkedList%3CT%3E %7B%0A        private Node%3CT%3E start;%0A%0A        public void add(T element) %7B%0A            Node%3CT%3E box = new Node%3CT%3E(element);%0A            this.start = box;%0A        %7D%0A%0A        public String toString() %7B%0A            StringBuilder builder = new StringBuilder();%0A            builder.append(%22Node %5Belement=%22).append(start).append(%22. next=%22).append(%22%5D%22);%0A            return builder.toString();%0A        %7D%0A    %7D%0A%0A    static class Node%3CT%3E %7B%0A        private T element;%0A        private Node%3CT%3E next;%0A%0A        public Node(T element) %7B%0A            this.element = element;%0A            this.next = null;%0A        %7D%0A        %0A        public Node(T element, Node%3CT%3E next) %7B%0A            this.element = element;%0A            this.next = next;%0A        %7D%0A%0A        public T getElement() %7B%0A            return element;%0A        %7D%0A%0A        public void setElement(T element) %7B%0A            this.element = element;%0A        %7D%0A%0A        public Node%3CT%3E getProximo() %7B%0A            return this.next;%0A        %7D%0A%0A        public void setProximo(Node%3CT%3E next) %7B%0A            this.next = next;%0A        %7D%0A%0A        public String toString() %7B%0A            StringBuilder builder = new StringBuilder();%0A            builder.append(%22Node %5Belement=%22).append(element).append(%22. next=%22).append(next).append(%22%5D%22);%0A            return builder.toString();%0A        %7D%0A%0A\n     \n",
            "lines": "37"
        },
        {
            "label": "2025-08-26_09-40-23",
            "content": "import java.util.ArrayList;\n\npublic class draft {\n    public static void main(String args[]) {\n\n        // Array\n        int[] num = new int[5];\n\n        num[0] = 52;\n        num[1] = 100;\n        num[2] = 57;\n        num[3] = 578;\n        num[4] = 02;\n\n        for(int i = 0; i < num.length; i++) {\n            System.out.println(num[i]);\n        }\n        \n        int[] num2 = {52, 100, 57, 587, 0};\n        \n        for(int n:num2) {\n            System.out.println(n);\n        }\n\n        //ArrayList -> addiciona automaticamente, sem se preocupar com o tamanho dele\n        //tem que passar uma Classe como tipo do array\n        //Primitimos int -> Integer, float -> Float, double -> Double, char -> Character\n        ArrayList<String> str = new ArrayList<String>();\n        str.add(\"guilherme\");\n        str.add(\"warley\");\n        str.add(\"brito\");\n        str.add(\"farias\");\n\n        for(String s:str) {\n            System.out.println(s);\n        }\n\n        //metodos -> .size() = tamanho do array, .get(index) = pega o elemento passado, .remove(index) = remove o elemento passado, .clear() = limpa\n\n\n        //LinkedList -> \n        LinkedList<Integer> list = new LinkedList<>();\n        list.add(1);\n\n        System.out.println(list);\n    }\n\n    //LikedList -> \n    \n    static class LinkedList<T> {\n        private Node<T> start;\n\n        public void add(T element) {\n            Node<T> box = new Node<T>(element);\n            this.start = box;\n        }\n\n        public String toString() {\n            StringBuilder builder = new StringBuilder();\n            builder.append(\"Node [element=\").append(start).append(\". next=\").append(\"]\");\n            return builder.toString();\n        }\n    }\n\n    static class Node<T> {\n        private T element;\n        private Node<T> next;\n\n        public Node(T element) {\n            this.element = element;\n            this.next = null;\n        }\n        \n        public Node(T element, Node<T> next) {\n            this.element = element;\n            this.next = next;\n        }\n\n        public T getElement() {\n            return element;\n        }\n\n        public void setElement(T element) {\n            this.element = element;\n        }\n\n        public Node<T> getProximo() {\n            return this.next;\n        }\n\n        public void setProximo(Node<T> next) {\n            this.next = next;\n        }\n\n        public String toString() {\n            StringBuilder builder = new StringBuilder();\n            builder.append(\"Node [element=\").append(element).append(\". next=\").append(next).append(\"]\");\n            return builder.toString();\n        }\n\n    }\n}\n\n",
            "lines": "103"
        }
    ]
}